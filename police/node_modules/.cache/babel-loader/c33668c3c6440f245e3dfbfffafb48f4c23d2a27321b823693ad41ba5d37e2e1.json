{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Auth Services\nexport const authService = {\n  login: async (email, password) => {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.user) {\n        localStorage.setItem('user', JSON.stringify(response.data.user));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message;\n    }\n  },\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n    }\n  },\n  logout: () => {\n    localStorage.removeItem('user');\n  },\n  getCurrentUser: () => {\n    return JSON.parse(localStorage.getItem('user'));\n  }\n};\n\n// Incident Services\nexport const incidentService = {\n  createIncident: async incidentData => {\n    try {\n      // Create a new axios instance for file uploads to avoid Content-Type conflicts\n      const formDataApi = axios.create({\n        baseURL: API_URL\n        // Don't set Content-Type header - let browser set it for FormData\n      });\n\n      // Add auth token if user is logged in\n      const user = authService.getCurrentUser();\n      if (user) {\n        formDataApi.defaults.headers.Authorization = `Bearer ${user.token}`;\n      }\n      const response = await formDataApi.post('/incidents', incidentData);\n      return response.data;\n    } catch (error) {\n      var _error$response3, _error$response4;\n      console.error('API Error:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message;\n    }\n  },\n  getAllIncidents: async () => {\n    try {\n      const response = await api.get('/incidents');\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  },\n  getIncidentById: async id => {\n    try {\n      const response = await api.get(`/incidents/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || error.message;\n    }\n  },\n  updateIncident: async (id, updateData) => {\n    try {\n      const response = await api.put(`/incidents/${id}`, updateData);\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || error.message;\n    }\n  },\n  deleteIncident: async id => {\n    try {\n      const response = await api.delete(`/incidents/${id}`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message;\n    }\n  }\n};\n\n// Add auth token to requests if user is logged in\napi.interceptors.request.use(config => {\n  const user = authService.getCurrentUser();\n  if (user) {\n    config.headers.Authorization = `Bearer ${user.token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","authService","login","email","password","response","post","data","user","localStorage","setItem","JSON","stringify","error","_error$response","message","register","userData","_error$response2","logout","removeItem","getCurrentUser","parse","getItem","incidentService","createIncident","incidentData","formDataApi","defaults","Authorization","token","_error$response3","_error$response4","console","getAllIncidents","get","_error$response5","getIncidentById","id","_error$response6","updateIncident","updateData","put","_error$response7","deleteIncident","delete","_error$response8","interceptors","request","use","config","Promise","reject"],"sources":["C:/Users/Admin/OneDrive/Desktop/POlice/police/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Auth Services\r\nexport const authService = {\r\n  login: async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      if (response.data.user) {\r\n        localStorage.setItem('user', JSON.stringify(response.data.user));\r\n      }\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('user');\r\n  },\r\n\r\n  getCurrentUser: () => {\r\n    return JSON.parse(localStorage.getItem('user'));\r\n  }\r\n};\r\n\r\n// Incident Services\r\nexport const incidentService = {\r\n  createIncident: async (incidentData) => {\r\n    try {\r\n      // Create a new axios instance for file uploads to avoid Content-Type conflicts\r\n      const formDataApi = axios.create({\r\n        baseURL: API_URL,\r\n        // Don't set Content-Type header - let browser set it for FormData\r\n      });\r\n\r\n      // Add auth token if user is logged in\r\n      const user = authService.getCurrentUser();\r\n      if (user) {\r\n        formDataApi.defaults.headers.Authorization = `Bearer ${user.token}`;\r\n      }\r\n\r\n      const response = await formDataApi.post('/incidents', incidentData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('API Error:', error.response?.data || error.message);\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getAllIncidents: async () => {\r\n    try {\r\n      const response = await api.get('/incidents');\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  getIncidentById: async (id) => {\r\n    try {\r\n      const response = await api.get(`/incidents/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  updateIncident: async (id, updateData) => {\r\n    try {\r\n      const response = await api.put(`/incidents/${id}`, updateData);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  },\r\n\r\n  deleteIncident: async (id) => {\r\n    try {\r\n      const response = await api.delete(`/incidents/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      throw error.response?.data || error.message;\r\n    }\r\n  }\r\n};\r\n\r\n// Add auth token to requests if user is logged in\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const user = authService.getCurrentUser();\r\n    if (user) {\r\n      config.headers.Authorization = `Bearer ${user.token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}